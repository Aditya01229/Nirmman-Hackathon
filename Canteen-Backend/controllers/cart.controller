// controllers/cart.controller.js
const Cart = require('../models/cart.model');
const MenuItem = require('../models/menu.model');

// Add item to cart
exports.addToCart = async (req, res) => {
    try {
        const { userId, menuItemId, quantity } = req.body;

        // Validate menu item
        const menuItem = await MenuItem.findById(menuItemId);
        if (!menuItem) {
            return res.status(404).json({ message: 'Menu item not found' });
        }

        if (!menuItem.isAvailable) {
            return res.status(400).json({ message: 'Menu item is currently unavailable' });
        }

        // Find existing cart or create new one
        let cart = await Cart.findOne({ userId });
        if (!cart) {
            cart = new Cart({ userId, items: [] });
        }

        // Check if item already exists in cart
        const existingItem = cart.items.find(item => 
            item.menuItem.toString() === menuItemId
        );

        if (existingItem) {
            // Update quantity and subtotal
            existingItem.quantity += quantity;
            existingItem.subtotal = existingItem.quantity * existingItem.price;
        } else {
            // Add new item
            cart.items.push({
                menuItem: menuItemId,
                quantity: quantity,
                price: menuItem.price,
                subtotal: menuItem.price * quantity
            });
        }

        await cart.save();
        await cart.populate('items.menuItem', 'name description');
        
        res.json(cart);
    } catch (error) {
        res.status(500).json({ 
            error: error.message,
            message: 'Error adding item to cart'
        });
    }
};

// Get cart
exports.getCart = async (req, res) => {
    try {
        const { userId } = req.params;
        const cart = await Cart.findOne({ userId })
            .populate('items.menuItem', 'name description price');
        
        if (!cart) {
            return res.status(404).json({ message: 'Cart not found' });
        }
        
        res.json(cart);
    } catch (error) {
        res.status(500).json({ 
            error: error.message,
            message: 'Error fetching cart'
        });
    }
};

// Update cart item quantity
exports.updateCartItem = async (req, res) => {
    try {
        const { userId, menuItemId, quantity } = req.body;
        
        const cart = await Cart.findOne({ userId });
        if (!cart) {
            return res.status(404).json({ message: 'Cart not found' });
        }

        const item = cart.items.find(item => 
            item.menuItem.toString() === menuItemId
        );

        if (!item) {
            return res.status(404).json({ message: 'Item not found in cart' });
        }

        if (quantity <= 0) {
            // Remove item if quantity is 0 or negative
            cart.items = cart.items.filter(item => 
                item.menuItem.toString() !== menuItemId
            );
        } else {
            // Update quantity and subtotal
            item.quantity = quantity;
            item.subtotal = item.price * quantity;
        }

        await cart.save();
        await cart.populate('items.menuItem', 'name description');
        
        res.json(cart);
    } catch (error) {
        res.status(500).json({ 
            error: error.message,
            message: 'Error updating cart item'
        });
    }
};

// Remove item from cart
exports.removeFromCart = async (req, res) => {
    try {
        const { userId, menuItemId } = req.params;
        
        const cart = await Cart.findOne({ userId });
        if (!cart) {
            return res.status(404).json({ message: 'Cart not found' });
        }

        cart.items = cart.items.filter(item => 
            item.menuItem.toString() !== menuItemId
        );

        await cart.save();
        await cart.populate('items.menuItem', 'name description');
        
        res.json(cart);
    } catch (error) {
        res.status(500).json({ 
            error: error.message,
            message: 'Error removing item from cart'
        });
    }
};

// Clear cart
exports.clearCart = async (req, res) => {
    try {
        const { userId } = req.params;
        
        const cart = await Cart.findOne({ userId });
        if (!cart) {
            return res.status(404).json({ message: 'Cart not found' });
        }

        cart.items = [];
        await cart.save();
        
        res.json({ message: 'Cart cleared successfully' });
    } catch (error) {
        res.status(500).json({ 
            error: error.message,
            message: 'Error clearing cart'
        });
    }
};