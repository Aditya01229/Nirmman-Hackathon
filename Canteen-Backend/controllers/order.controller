// controllers/order.controller.js
const Order = require('../models/order.model');
const qr = require('qrcode');

const generateOrderCode = () => {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
};

exports.createOrder = async (req, res) => {
    try {
        const { items, tableNumber } = req.body;
        const totalAmount = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const orderCode = generateOrderCode();
        
        const orderData = { items, tableNumber, orderCode, totalAmount };
        const qrCode = await qr.toDataURL(JSON.stringify(orderData));
        
        const order = new Order({
            items,
            totalAmount,
            tableNumber,
            orderCode,
            qrCode
        });
        
        await order.save();
        res.status(201).json(order);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

exports.getAllOrders = async (req, res) => {
    try {
        const orders = await Order.find().sort({ createdAt: -1 });
        res.json(orders);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

exports.getOrderByCode = async (req, res) => {
    try {
        const order = await Order.findOne({ orderCode: req.params.orderCode });
        if (!order) {
            return res.status(404).json({ message: 'Order not found' });
        }
        res.json(order);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

exports.updateOrderStatus = async (req, res) => {
    try {
        const { status } = req.body;
        const order = await Order.findOneAndUpdate(
            { orderCode: req.params.orderCode },
            { status },
            { new: true }
        );
        if (!order) {
            return res.status(404).json({ message: 'Order not found' });
        }
        res.json(order);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};